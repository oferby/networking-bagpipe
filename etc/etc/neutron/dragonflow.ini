[DEFAULT]


[df]
metadata_interface = tap-metadata
pub_sub_driver = redis_db_pubsub_driver
enable_selective_topology_distribution = True
pub_sub_use_multiproc = False
enable_df_pub_sub = True
#apps_list = classifier_app.ClassifierApp,l2_app.L2App,l3_app.L3App,dhcp_app.DHCPApp,dnat_app.DNATApp,sg_app.SGApp,portsec_app.PortSecApp,portqos_app.PortQosApp,tunneling_app.TunnelingApp,provider_networks_app.ProviderNetworksApp
apps_list = classifier_app.ClassifierApp,l2_app.L2App,l3_app.L3App,dhcp_app.DHCPApp,sg_app.SGApp,portsec_app.PortSecApp,portqos_app.PortQosApp,tunneling_app.TunnelingApp,provider_networks_app.ProviderNetworksApp,df_mpls_app.MplsApp
integration_bridge = br-int
tunnel_type = vxlan
local_ip = 10.10.132.1
management_ip = 10.10.132.1
enable_dpdk = False
enable_neutron_notifier = False
port_status_notifier = redis_port_status_notifier_driver
nb_db_class = redis_nb_db_driver
remote_db_hosts = 10.10.132.1:4001
remote_db_port = 4001
remote_db_ip = 10.10.132.1
publisher_rate_limit_count = 1
publisher_rate_limit_timeout = 180
monitor_table_poll_time = 30

#
# From dragonflow.conf
#

# The remote db server ip address (IP address value)
#remote_db_ip = 127.0.0.1

# The remote db server port (port value)
# Minimum value: 0
# Maximum value: 65535
#remote_db_port = 4001

# Remote DB cluster host:port pairs. (list value)
#remote_db_hosts = $remote_db_ip:$remote_db_port

# The driver to use for the NB database (string value)
#nb_db_class = etcd_nb_db_driver

# Local host VTEP IP (IP address value)
#local_ip = 127.0.0.1

# Local host management IP (IP address value)
#management_ip = 127.0.0.1

# The encapsulation types for the tunnels (list value)
#tunnel_types = geneve,vxlan,gre

# Enable dpdk (boolean value)
#enable_dpdk = false

# List of openflow applications classes to load (string value)
#apps_list = l2_app.L2App,l3_proactive_app.L3ProactiveApp,dhcp_app.DHCPApp

# Integration bridge to use. Do not change this parameter unless you have a
# good reason to. This is the name of the OVS integration bridge. There is one
# per hypervisor. The integration bridge acts as a virtual 'patch bay'. All VM
# VIFs are attached to this bridge and then 'patched' according to their
# network connectivity. (string value)
#integration_bridge = br-int

# Enable IPv6 DHCP by using DHCP agent (boolean value)
#use_centralized_ipv6_DHCP = false

# Enable use of Dragonflow built-in pub/sub (boolean value)
#enable_df_pub_sub = false

# Enable use of Dragonflow db consistency (boolean value)
#enable_df_db_consistency = true

# Drivers to use for the Dragonflow pub/sub (string value)
#pub_sub_driver = zmq_pubsub_driver

# Drivers to use for the Dragonflow pub/sub (string value)
#pub_sub_multiproc_driver = zmq_pubsub_multiproc_driver

# Enable notifier for Dragonflow controller sending data to neutron server
# (boolean value)
#enable_neutron_notifier = false

# Notifier for the Dragonflow controller events (string value)
#neutron_notifier = nb_api_neutron_notifier_driver

# List of the Neutron Server Publisher IPs. (list value)
#publishers_ips = $local_ip

# Neutron Server Publishers port (port value)
# Minimum value: 0
# Maximum value: 65535
#publisher_port = 8866

# Neutron Server Publishers transport protocol (string value)
#publisher_transport = tcp

# Neutron Server Publishers bind address (string value)
#publisher_bind_address = *

# Use inter-process publish/subscribe. Publishers send events via the publisher
# service. (boolean value)
#pub_sub_use_multiproc = true

# Neutron Server Publisher inter-process socket address (string value)
#publisher_multiproc_socket = /var/run/zmq_pubsub/zmq-publisher-socket

# Publisher idle timeout before it is removed from the table (integer value)
#publisher_timeout = 300

# Min periodically db comparison time (integer value)
#db_sync_time = 120

# Limit update of publishers' table timestamp to $publisher_rate_limit_count
# per this many seconds. (integer value)
#publisher_rate_limit_timeout = 180

# Limit update of publishers' table timestamp to this many times per
# $publisher_rate_limit_timeout seconds. (integer value)
#publisher_rate_limit_count = 1

# Poll monitored tables every this number of seconds (floating point value)
#monitor_table_poll_time = 30

# When enabled, each controller will get only the part of the topology relevant
# to it. (boolean value)
#enable_selective_topology_distribution = false

# local controller connect to the ovsdb server socket address (string value)
#ovsdb_local_address = /usr/local/var/run/openvswitch/db.sock

# The TTL of the distributed lock. The lock will be reset if it is timeout.
# (integer value)
#distributed_lock_ttl = 120

# Type of VIF to be used for ports valid values are(ovs, vhostuser) default ovs
# (string value)
# Allowed values: ovs, vhostuser
#vif_type = ovs

# The directory in which vhost virtio socketis created by all the vswitch
# daemons (string value)
#vhost_sock_dir = /var/run/openvswitch

# This time(in seconds) should be at least thrice of report_interval, to be
# sure the service is really down. (integer value)
#service_down_time = 80

# Time(in seconds) interval between two heartbeats (integer value)
#report_interval = 25

# Neutron report heart beat every this number in secondsplus a random delay,
# which should be no more thanneutron_listener_report_delay (integer value)
#neutron_listener_report_interval = 25

# The max delay in seconds for Neutron to report heartbeat to df-db (integer
# value)
#neutron_listener_report_delay = 10

# Compute node external IP (string value)
#external_host_ip = <None>


[df_active_port_detection]

#
# From dragonflow.conf
#

# Interval time of sending detection arp packets. (integer value)
#detection_interval_time = 30


[df_bgp]

#
# From dragonflow.conf
#

# The interval(in seconds) of BGP service to get data updates and advertise BGP
# routes (integer value)
#pulse_interval = 5

# BGP speaker driver class to be instantiated. (string value)
#bgp_speaker_driver = neutron_dynamic_routing.services.bgp.agent.driver.ryu.driver.RyuBgpDriver

# 32-bit BGP identifier, typically an IPv4 address owned by the system running
# the BGP DrAgent. (string value)
#bgp_router_id = 127.0.0.1


[df_cassandra]

#
# From dragonflow.conf
#

# The default consistency level for Cassandra session.The value should be any,
# one, two, three, quorum, all,local_quorum, each_quorum, serial, local_serial,
# local_one. (string value)
#consistency_level = one

# The default load balancing policy for Cassandra cluster.The value should be
# rr, dc_rr, wl_rr, token_rr. (string value)
#load_balancing = rr

# The DC name for dc_rr load balancing policy. (string value)
#local_dc_name = local

# The number of respected remote hosts for dc_rr load balancing policy.
# (integer value)
#used_hosts_per_remote_dc = 0

# The hosts to permit connections to for wl_rr load balancing policy. Please
# specify a list of hosts by comma. (string value)
#whitelist_hosts = localhost


[df_dhcp_app]

#
# From dragonflow.conf
#

# Comma-separated list of the DNS servers which will be used. (list value)
#df_dns_servers = 8.8.8.8,8.8.4.4

# default MTU setting for interface. (integer value)
#df_default_network_device_mtu = 1460

# Port Max rate of DHCP messages per second (integer value)
#df_dhcp_max_rate_per_sec = 3

# Time to block port that passes the max rate (integer value)
#df_dhcp_block_time_in_sec = 100

# Set True to add route for link local address, which will be useful for
# metadata service. (boolean value)
#df_add_link_local_route = true


[df_dnat_app]
ex_peer_patch_port = patch-int
int_peer_patch_port = patch-ex
external_network_bridge = br-ex

#
# From dragonflow.conf
#

# Name of bridge used for external network traffic (string value)
#external_network_bridge = br-ex

# Peer patch port in integration bridge for external bridge. (string value)
#int_peer_patch_port = patch-ex

# Peer patch port in external bridge for integration bridge. (string value)
#ex_peer_patch_port = patch-int

# Max rate to reply ICMP time exceeded message per second. (integer value)
#dnat_ttl_invalid_max_rate = 3

# Max rate to handle ICMP error message per second. (integer value)
#dnat_icmp_error_max_rate = 3


[df_l2_app]

#
# From dragonflow.conf
#

# Install OVS flows to respond to ARP and ND requests. (boolean value)
#l2_responder = true


[df_l3_app]

#
# From dragonflow.conf
#

# Max rate to reply ICMP time exceeded message per second. (integer value)
#router_ttl_invalid_max_rate = 3

# Max rate to reply ICMP unreachable message per second for router port.
# (integer value)
#router_port_unreach_max_rate = 3


[df_metadata]
metadata_interface = tap-metadata
port = 18080
ip = 169.254.169.254

#
# From dragonflow.conf
#

# The IP to which the DF metadata service proxy is bound (IP address value)
#ip = 169.254.169.254

# The port to which the DF metadata service proxy is bound (port value)
# Minimum value: 0
# Maximum value: 65535
#port = 18080

# The name of the interface to bind the metadataservice proxy (string value)
#metadata_interface = tap-metadata


[df_mpls]

#
# From dragonflow.conf
#

# OVS bridge that handles MPLS packets (string value)
#mpls_bridge = br-int

# (IP address value)
ip_address = 10.11.132.1

# (string value)
mpls_mac = 00:1b:21:45:d8:1d

# (string value)
mpls_port = enp1s0f1


[df_provider_networks_app]

#
# From dragonflow.conf
#

# Comma-separated list of <physical_network>:<bridge> tuples mapping physical
# network names to the dragonflow's node-specific Open vSwitch bridge names to
# be used for flat and VLAN networks. Each bridge must exist, and should have a
# physical network interface configured as a port. All physical networks
# configured on the server should have mappings to appropriate bridges on each
# dragonflow node. (list value)
#bridge_mappings = public:br-ex


[df_ryu]

#
# From dragonflow.conf
#

# Address to listen on for OpenFlow connections. (IP address value)
#of_listen_address = 127.0.0.1

# Port to listen on for OpenFlow connections. (port value)
# Minimum value: 0
# Maximum value: 65535
#of_listen_port = 6653


[df_snat_app]

#
# From dragonflow.conf
#

# Enable install of common goto flows to ingress/egress NAT tables or re-use
# goto flows installed by other DF application (boolean value)
#enable_goto_flows = true
